// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StyleCategory {
  beer
  mead
  cider
}

model Style {
  id            Int           @id @default(autoincrement())
  userId        String?
  // owner         User?         @relation(fields: [userId], references: [id])
  name          String
  slug          String        @unique
  //recipes       Recipe[]
  category      StyleCategory
  subcategoryId Int
  identifier    String        @unique
  overall       String?
  aroma         String?
  appearance    String?
  flavor        String?
  mouthfeel     String?
  comments      String?
  history       String?
  ingredients   String?
  comparison    String?
  examples      String?
  ibuLow        Float?
  ibuHigh       Float?
  ibuFlex       Boolean       @default(false)
  ogLow         Float?
  ogHigh        Float?
  ogFlex        Boolean       @default(false)
  fgLow         Float?
  fgHigh        Float?
  fgFlex        Boolean       @default(false)
  srmLow        Float?
  srmHigh       Float?
  srmFlex       Boolean       @default(false)
  abvLow        Float?
  abvHigh       Float?
  abvFlex       Boolean       @default(false)
}

enum UserRoles {
  SUPERUSER
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  role          UserRoles       @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
